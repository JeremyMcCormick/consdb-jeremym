"""DM-47002

Revision ID: 59cb92264326
Revises: e9fd2cdb9c12
Create Date: 2024-11-13 14:05:00.655629+00:00

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "59cb92264326"
down_revision: Union[str, None] = "e9fd2cdb9c12"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ccdvisit1",
        sa.Column(
            "ccdvisit_id",
            sa.BIGINT().with_variant(mysql.BIGINT(), "mysql").with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "visit_id",
            sa.BIGINT().with_variant(mysql.BIGINT(), "mysql").with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Identifier of the visit.",
        ),
        sa.Column(
            "detector",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=False,
            comment="Number of the detector in the focal plane.",
        ),
        sa.Column(
            "s_region",
            sa.VARCHAR(length=1024)
            .with_variant(mysql.VARCHAR(length=1024), "mysql")
            .with_variant(sa.VARCHAR(length=1024), "postgresql"),
            nullable=True,
            comment="Sky region in STC-S format (https://www.ivoa.net/documents/STC-S/20130917/index.html).",
        ),
        sa.PrimaryKeyConstraint("ccdvisit_id"),
        schema="cdb_latiss",
        mysql_engine="MyISAM",
    )
    op.create_table(
        "visit1",
        sa.Column(
            "visit_id",
            sa.BIGINT().with_variant(mysql.BIGINT(), "mysql").with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "exposure_name",
            sa.VARCHAR(length=20)
            .with_variant(mysql.VARCHAR(length=20), "mysql")
            .with_variant(sa.VARCHAR(length=20), "postgresql"),
            nullable=False,
            comment="Official name of the exposure mapped to this visit by the 1-to-1 visit system.",
        ),
        sa.Column(
            "controller",
            sa.VARCHAR(length=1)
            .with_variant(mysql.VARCHAR(length=1), "mysql")
            .with_variant(sa.VARCHAR(length=1), "postgresql"),
            nullable=False,
            comment="The abbreviation of the controller used for the observation (O, C).",
        ),
        sa.Column(
            "day_obs",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=False,
            comment="Day of observation.",
        ),
        sa.Column(
            "seq_num",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=False,
            comment="Sequence number.",
        ),
        sa.Column(
            "physical_filter",
            sa.VARCHAR(length=32)
            .with_variant(mysql.VARCHAR(length=32), "mysql")
            .with_variant(sa.VARCHAR(length=32), "postgresql"),
            nullable=True,
            comment="ID of physical filter, the filter associated with a particular instrument.",
        ),
        sa.Column(
            "band",
            sa.VARCHAR(length=32)
            .with_variant(mysql.VARCHAR(length=32), "mysql")
            .with_variant(sa.VARCHAR(length=32), "postgresql"),
            nullable=True,
            comment="Name of the band used to take the visit. Abstract filter that is not associated with a particular instrument.",
        ),
        sa.Column(
            "s_ra",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Central Spatial Position in ICRS; Right ascension of targeted focal plane center.",
        ),
        sa.Column(
            "s_dec",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Central Spatial Position in ICRS; Declination of targeted focal plane center.",
        ),
        sa.Column(
            "sky_rotation",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Targeted sky rotation angle.",
        ),
        sa.Column(
            "azimuth_start",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Azimuth of focal plane center at the start of the visit.",
        ),
        sa.Column(
            "azimuth_end",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Azimuth of focal plane center at the end of the visit.",
        ),
        sa.Column(
            "azimuth",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Azimuth of focal plane center at the middle of the visit.",
        ),
        sa.Column(
            "altitude_start",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Altitude of focal plane center at the start of the visit.",
        ),
        sa.Column(
            "altitude_end",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Altitude of focal plane center at the end of the visit.",
        ),
        sa.Column(
            "altitude",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Altitude of focal plane center at the middle of the visit.",
        ),
        sa.Column(
            "zenith_distance_start",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Zenith distance at the start of the visit.",
        ),
        sa.Column(
            "zenith_distance_end",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Zenith distance at the end of the visit.",
        ),
        sa.Column(
            "zenith_distance",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Zenith distance at the middle of the visit.",
        ),
        sa.Column(
            "airmass",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Airmass of the observed line of sight at the middle of the visit.",
        ),
        sa.Column(
            "exp_midpt",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(fsp=6), "mysql")
            .with_variant(postgresql.TIMESTAMP(precision=6), "postgresql"),
            nullable=True,
            comment="Midpoint time for visit at the fiducial center of the focal plane. array. TAI, accurate to 10ms.",
        ),
        sa.Column(
            "exp_midpt_mjd",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Midpoint time for visit at the fiducial center of the focal plane. array in MJD. TAI, accurate to 10ms.",
        ),
        sa.Column(
            "obs_start",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(fsp=6), "mysql")
            .with_variant(postgresql.TIMESTAMP(precision=6), "postgresql"),
            nullable=True,
            comment="Start time of the visit at the fiducial center of the focal plane. array, TAI, accurate to 10ms.",
        ),
        sa.Column(
            "obs_start_mjd",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Start of the visit in MJD, TAI, accurate to 10ms.",
        ),
        sa.Column(
            "obs_end",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(fsp=6), "mysql")
            .with_variant(postgresql.TIMESTAMP(precision=6), "postgresql"),
            nullable=True,
            comment="End time of the visit at the fiducial center of the focal plane. array, TAI, accurate to 10ms.",
        ),
        sa.Column(
            "obs_end_mjd",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="End of the visit in MJD, TAI, accurate to 10ms.",
        ),
        sa.Column(
            "exp_time",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Spatially-averaged duration of visit, accurate to 10ms.",
        ),
        sa.Column(
            "shut_time",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Spatially-averaged shutter-open duration, accurate to 10ms.",
        ),
        sa.Column(
            "dark_time",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Duration from last clear to readout, accurate to 10ms.",
        ),
        sa.Column(
            "group_id",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=True,
            comment="Identifier for the group that this visit is part of.",
        ),
        sa.Column(
            "cur_index",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number (1-based) of the observation within its group.",
        ),
        sa.Column(
            "max_index",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Expected number of observations within the group.",
        ),
        sa.Column(
            "img_type",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=True,
            comment="Type of visit taken.",
        ),
        sa.Column(
            "emulated",
            sa.BOOLEAN().with_variant(sa.BOOLEAN(), "mysql").with_variant(sa.BOOLEAN(), "postgresql"),
            nullable=True,
            comment="True if the visit was taken in emulation mode.",
        ),
        sa.Column(
            "science_program",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=True,
            comment="Science program.",
        ),
        sa.Column(
            "observation_reason",
            sa.VARCHAR(length=68)
            .with_variant(mysql.VARCHAR(length=68), "mysql")
            .with_variant(sa.VARCHAR(length=68), "postgresql"),
            nullable=True,
            comment="Reason for the observation.",
        ),
        sa.Column(
            "target_name",
            sa.VARCHAR(length=64)
            .with_variant(mysql.VARCHAR(length=64), "mysql")
            .with_variant(sa.VARCHAR(length=64), "postgresql"),
            nullable=True,
            comment="Target of the observation.",
        ),
        sa.Column(
            "air_temp",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Outside air temperature in degC.",
        ),
        sa.Column(
            "pressure",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Outside air pressure.",
        ),
        sa.Column(
            "humidity",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Outside relative humidity.",
        ),
        sa.Column(
            "wind_speed",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Outside wind speed.",
        ),
        sa.Column(
            "wind_dir",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Wind direction.",
        ),
        sa.Column(
            "dimm_seeing",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Seeing as measured by external DIMM (FWHM).",
        ),
        sa.Column(
            "shut_lower",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Dome dropout door opening percentage.",
        ),
        sa.Column(
            "shut_upper",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Dome main door opening percentage.",
        ),
        sa.Column(
            "focus_z",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Focus Z position.",
        ),
        sa.Column(
            "simulated",
            sa.BOOLEAN().with_variant(sa.BOOLEAN(), "mysql").with_variant(sa.BOOLEAN(), "postgresql"),
            nullable=True,
            comment="Were any control system components simulated?",
        ),
        sa.Column(
            "vignette",
            sa.VARCHAR(length=10)
            .with_variant(mysql.VARCHAR(length=10), "mysql")
            .with_variant(sa.VARCHAR(length=10), "postgresql"),
            nullable=True,
            comment="Instrument blocked from the sky: UNKNOWN, NO, PARTIALLY, FULLY.",
        ),
        sa.Column(
            "vignette_min",
            sa.VARCHAR(length=10)
            .with_variant(mysql.VARCHAR(length=10), "mysql")
            .with_variant(sa.VARCHAR(length=10), "postgresql"),
            nullable=True,
            comment="Lowest amount of instrument vignetting detected during the visit: UNKNOWN, NO, PARTIALLY, FULLY.",
        ),
        sa.Column(
            "s_region",
            sa.VARCHAR(length=1024)
            .with_variant(mysql.VARCHAR(length=1024), "mysql")
            .with_variant(sa.VARCHAR(length=1024), "postgresql"),
            nullable=True,
            comment="Sky region in STC-S format (https://www.ivoa.net/documents/STC-S/20130917/index.html).",
        ),
        sa.PrimaryKeyConstraint("day_obs", "seq_num"),
        schema="cdb_latiss",
        mysql_engine="MyISAM",
    )
    op.create_table(
        "exposure_quicklook",
        sa.Column(
            "exposure_id",
            sa.BIGINT().with_variant(mysql.BIGINT(), "mysql").with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "day_obs",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=False,
            comment="Day of observation.",
        ),
        sa.Column(
            "seq_num",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=False,
            comment="Sequence number.",
        ),
        sa.Column(
            "postisr_pixel_median",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median postISR pixel value.",
        ),
        sa.ForeignKeyConstraint(
            ["day_obs", "seq_num"],
            ["cdb_latiss.exposure.day_obs", "cdb_latiss.exposure.seq_num"],
            name="fk_exposure_quicklook_day_obs_seq_num",
        ),
        sa.ForeignKeyConstraint(
            ["exposure_id"], ["cdb_latiss.exposure.exposure_id"], name="fk_exposure_quicklook_obs_id"
        ),
        sa.PrimaryKeyConstraint("day_obs", "seq_num"),
        schema="cdb_latiss",
        mysql_engine="MyISAM",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "pixel_scale",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Measured detector pixel scale.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "psf_ap_flux_delta",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of model psf aperture flux (with aperture radius of max(2, 3*psfSigma)) values evaluated on a grid of unmasked pixels.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "ccdvisit1_quicklook",
        sa.Column(
            "psf_ap_corr_sigma_scaled_delta",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of psf flux aperture correction factors scaled (divided) by the psfSigma evaluated on a grid of unmasked pixels.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "mount_motion_image_degradation",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Image degradation due to mount motion.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "mount_motion_image_degradation_az",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Image degradation due to mount motion in azimuth.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "mount_motion_image_degradation_el",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Image degradation due to mount motion in elevation.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "mount_jitter_rms",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="RMS mount jitter.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "mount_jitter_rms_az",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Azimuth RMS mount jitter.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "mount_jitter_rms_el",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Elevation RMS mount jitter.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "mount_jitter_rms_rot",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Rotator RMS mount jitter.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "visit1_quicklook",
        sa.Column(
            "pixel_scale",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Measured detector pixel scale.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "visit1_quicklook",
        sa.Column(
            "stats_mag_lim",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Magnitude limit at fixed SNR (default SNR=5) calculated from exposure summary stats.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "visit1_quicklook",
        sa.Column(
            "psf_ap_flux_delta",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of model psf aperture flux (with aperture radius of max(2, 3*psfSigma)) values evaluated on a grid of unmasked pixels.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "visit1_quicklook",
        sa.Column(
            "psf_ap_corr_sigma_scaled_delta",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of psf flux aperture correction factors scaled (divided) by the psfSigma evaluated on a grid of unmasked pixels.",
        ),
        schema="cdb_latiss",
    )
    op.drop_column("visit1_quicklook", "postisr_pixel_median", schema="cdb_latiss")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "visit1_quicklook",
        sa.Column(
            "postisr_pixel_median",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
            comment="Median postISR pixel value.",
        ),
        schema="cdb_latiss",
    )
    op.drop_column("visit1_quicklook", "psf_ap_corr_sigma_scaled_delta", schema="cdb_latiss")
    op.drop_column("visit1_quicklook", "psf_ap_flux_delta", schema="cdb_latiss")
    op.drop_column("visit1_quicklook", "stats_mag_lim", schema="cdb_latiss")
    op.drop_column("visit1_quicklook", "pixel_scale", schema="cdb_latiss")
    op.drop_column("exposure", "mount_jitter_rms_rot", schema="cdb_latiss")
    op.drop_column("exposure", "mount_jitter_rms_el", schema="cdb_latiss")
    op.drop_column("exposure", "mount_jitter_rms_az", schema="cdb_latiss")
    op.drop_column("exposure", "mount_jitter_rms", schema="cdb_latiss")
    op.drop_column("exposure", "mount_motion_image_degradation_el", schema="cdb_latiss")
    op.drop_column("exposure", "mount_motion_image_degradation_az", schema="cdb_latiss")
    op.drop_column("exposure", "mount_motion_image_degradation", schema="cdb_latiss")
    op.drop_column("ccdvisit1_quicklook", "psf_ap_corr_sigma_scaled_delta", schema="cdb_latiss")
    op.drop_column("ccdvisit1_quicklook", "psf_ap_flux_delta", schema="cdb_latiss")
    op.drop_column("ccdvisit1_quicklook", "pixel_scale", schema="cdb_latiss")
    op.drop_table("exposure_quicklook", schema="cdb_latiss")
    op.drop_table("visit1", schema="cdb_latiss")
    op.drop_table("ccdvisit1", schema="cdb_latiss")
    # ### end Alembic commands ###
